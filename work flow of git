GIT WORKFLOW 
            Git is the most commonly used version control system today. A Git workflow is a recipe or recommendation for how to use Git to accomplish work in a consistent and productive manner. G
it workflows encourage developers and DevOps teams to leverage Git effectively and consistently. Git offers a lot of flexibility in how users manage changes. Given Git's focus on flexibility, there is no standardized process on how to interact with Git. When working with a team on a Git-managed project, it’s important to make sure the team is all in agreement on how the flow of changes will be applied. To ensure the team is on the same page, an agreed-upon Git workflow should be developed or selected. There are several publicized Git workflows that may be a good fit for your team. Here, we will discuss some of these Git workflow options.
The array of possible workflows can make it hard to know where to begin when implementing Git in the workplace. 
This page provides a starting point by surveying the most common Git workflows for software teams.
As you read through, remember that these workflows are designed to be guidelines rather than concrete rules. We want to show you what’s possible, 
so you can mix and match aspects from different workflows to suit your individual needs.

1. The working directory is the local file system where you create, edit, and organize your
project files. When you initiate a Git repository in a directory, it becomes a part of the working directory@
2. The staging area is an intermediate area between the working directory and the
repository. It acts as a holding area for changes you want to include in the next commit. 3efore a file's changes
are committed, they need to be staged in the index@
3. The repository, also known as the Git repository or Git database, is where Git permanently
stores committed snapshots of your project. It contains the complete history of changes, branches, tags, and
other Git-related data.
